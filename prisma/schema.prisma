generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ORGANIZER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum TicketType {
  REGULAR
  VIP
  EARLY_BIRD
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole  @default(CUSTOMER)
  referralCode      String    @unique
  referredBy        String?
  pointsBalance     Int       @default(0)
  avatar            String?
  isVerified        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  organizedEvents   Event[]
  transactions      Transaction[]
  reviews           Review[]
  pointsEarned      Point[]   @relation("PointsEarned")
  pointsUsed        Point[]   @relation("PointsUsed")
  discountCoupons   DiscountCoupon[]

  @@map("users")
}

model Event {
  id              String      @id @default(uuid())
  name            String
  description     String
  price           Int         @default(0) // in IDR
  date            DateTime
  time            String
  location        String
  category        String
  availableSeats  Int
  bookedSeats     Int         @default(0)
  status          EventStatus @default(DRAFT)
  imageUrl        String?
  isFree          Boolean     @default(true)
  organizerId     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  organizer       User          @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  tickets         Ticket[]
  transactions    Transaction[]
  reviews         Review[]
  promotions      Promotion[]

  @@map("events")
}

model Ticket {
  id          String     @id @default(uuid())
  eventId     String
  type        TicketType @default(REGULAR)
  price       Int        // in IDR
  quantity    Int
  sold        Int        @default(0)
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  event            Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  transactionItems TransactionItem[]

  @@map("tickets")
}

model Transaction {
  id              String            @id @default(uuid())
  userId          String
  eventId         String
  totalAmount     Int               // in IDR
  discountAmount  Int               @default(0)
  finalAmount     Int               // in IDR
  status          TransactionStatus @default(PENDING)
  paymentMethod   String?
  referralDiscount Int              @default(0)
  pointsUsed      Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user            User                @relation(fields: [userId], references: [id])
  event           Event               @relation(fields: [eventId], references: [id])
  items           TransactionItem[]
  usedCoupons     TransactionCoupon[]

  @@map("transactions")
}

model TransactionItem {
  id            String @id @default(uuid())
  transactionId String
  ticketId      String
  quantity      Int
  unitPrice     Int    // in IDR
  totalPrice    Int    // in IDR

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  ticket      Ticket      @relation(fields: [ticketId], references: [id])

  @@map("transaction_items")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("reviews")
}

model Point {
  id          String   @id @default(uuid())
  earnedById  String?
  usedById    String?
  amount      Int      // in points
  description String
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  earnedBy User? @relation("PointsEarned", fields: [earnedById], references: [id])
  usedBy   User? @relation("PointsUsed", fields: [usedById], references: [id])

  @@map("points")
}

model DiscountCoupon {
  id              String   @id @default(uuid())
  userId          String
  code            String   @unique
  discountPercent Int      // percentage
  isUsed          Boolean  @default(false)
  expiresAt       DateTime
  createdAt       DateTime @default(now())

  // Relations
  user                User                @relation(fields: [userId], references: [id])
  transactionCoupons  TransactionCoupon[]

  @@map("discount_coupons")
}

model TransactionCoupon {
  id               String @id @default(uuid())
  transactionId    String
  discountCouponId String

  // Relations
  transaction    Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  discountCoupon DiscountCoupon @relation(fields: [discountCouponId], references: [id])

  @@map("transaction_coupons")
}

model Promotion {
  id              String   @id @default(uuid())
  eventId         String
  name            String
  description     String
  discountPercent Int      // percentage
  maxUses         Int
  currentUses     Int      @default(0)
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("promotions")
}
